# gui/character_setup.py - –æ–∫–Ω–æ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≥–æ–ª–æ—Å–æ–≤ –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π, –≤—ã–±–æ—Ä TTS –∏ –≥–æ–ª–æ—Å–æ–≤ + API –∫–ª—é—á–∏ + —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
import tkinter as tk
from tkinter import ttk, messagebox
import sys
from pathlib import Path
sys.path.append(str(Path(__file__).parent.parent))

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º TTS –º–µ–Ω–µ–¥–∂–µ—Ä
from tts_engines.tts_manager import TTSManager

class CharacterSetupWindow:
    def __init__(self, parent, characters, profile, settings, subtitles=None):
        self.parent = parent
        self.characters = characters
        self.profile = profile
        self.settings = settings
        self.subtitles = subtitles  # –î–∞–Ω–Ω—ã–µ —Å—É–±—Ç–∏—Ç—Ä–æ–≤ –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ —Ç–æ–∫–µ–Ω–æ–≤
        self.character_tokens = {}  # –ö–µ—à —Ä–∞—Å—Å—á–∏—Ç–∞–Ω–Ω—ã—Ö —Ç–æ–∫–µ–Ω–æ–≤
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º TTS –º–µ–Ω–µ–¥–∂–µ—Ä
        self.tts_manager = TTSManager(settings)
        
        self.window = tk.Toplevel(parent)
        self.window.title("–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –≥–æ–ª–æ—Å–æ–≤ –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π")
        self.window.geometry("1200x700")  # –£–º–µ–Ω—å—à–µ–Ω —Ä–∞–∑–º–µ—Ä
        self.window.minsize(1200, 600)
        self.window.transient(parent)
        self.window.grab_set()
        
        self.tts_engines = ["google_tts", "edge_tts", "gtts", "coqui_tts", "elevenlabs"]
        self.voices_data = self.load_voices_data()
        
        self.setup_ui()
        self.load_existing_settings()
        
    def setup_ui(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞"""
        main_frame = ttk.Frame(self.window, padding="15")
        main_frame.grid(row=0, column=0, sticky=(tk.W, tk.E, tk.N, tk.S))
        
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        ttk.Label(main_frame, text="–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –≥–æ–ª–æ—Å–æ–≤ –¥–ª—è –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π", 
                 font=("Arial", 14, "bold")).grid(row=0, column=0, columnspan=7, pady=15)
        
        # –ó–∞–≥–æ–ª–æ–≤–∫–∏ –∫–æ–ª–æ–Ω–æ–∫
        headers = ["–ü–µ—Ä—Å–æ–Ω–∞–∂", "–ü–æ–ª", "TTS –î–≤–∏–∂–æ–∫", "–ì–æ–ª–æ—Å", "ID –ì–æ–ª–æ—Å–∞", "API –ö–ª—é—á", "–¢–µ—Å—Ç", "–°—Ç–∞—Ç—É—Å"]
        widths = [18, 8, 12, 18, 20, 20, 8, 12]
        
        for i, (header, width) in enumerate(zip(headers, widths)):
            label = ttk.Label(main_frame, text=header, font=("Arial", 10, "bold"))
            label.grid(row=1, column=i, padx=5, pady=8, sticky=tk.W)
        
        # –°–∫—Ä–æ–ª–ª–∏—Ä—É–µ–º–∞—è –æ–±–ª–∞—Å—Ç—å
        canvas = tk.Canvas(main_frame, height=450)
        scrollbar = ttk.Scrollbar(main_frame, orient="vertical", command=canvas.yview)
        scrollable_frame = ttk.Frame(canvas)
        
        scrollable_frame.bind(
            "<Configure>",
            lambda e: canvas.configure(scrollregion=canvas.bbox("all"))
        )
        
        canvas.create_window((0, 0), window=scrollable_frame, anchor="nw")
        canvas.configure(yscrollcommand=scrollbar.set)
        
        canvas.grid(row=2, column=0, columnspan=7, sticky=(tk.W, tk.E, tk.N, tk.S), pady=5)
        scrollbar.grid(row=2, column=7, sticky=(tk.N, tk.S), pady=5)
        
        # –°–æ–∑–¥–∞–Ω–∏–µ —Å—Ç—Ä–æ–∫ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞
        self.character_widgets = {}
        
        for i, (name, char_data) in enumerate(self.characters.items()):
            row = i
            
            # –ò–º—è –ø–µ—Ä—Å–æ–Ω–∞–∂–∞
            name_label = ttk.Label(scrollable_frame, text=name, font=("Arial", 9))
            name_label.grid(row=row, column=0, padx=4, pady=4, sticky=tk.W)
            
            # –ü–æ–ª
            gender_var = tk.StringVar(value=char_data.get('gender', 'unknown'))
            gender_combo = ttk.Combobox(scrollable_frame, textvariable=gender_var, 
                                      values=["male", "female", "unknown"], width=8)
            gender_combo.grid(row=row, column=1, padx=4, pady=4)
            
            # –í–∫–ª—é—á–∞–µ–º –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ/–≤—Å—Ç–∞–≤–∫—É
            self.enable_copy_paste(gender_combo)
            
            # TTS –î–≤–∏–∂–æ–∫
            engine_var = tk.StringVar()
            engine_combo = ttk.Combobox(scrollable_frame, textvariable=engine_var, 
                                      values=self.tts_engines, width=12)
            engine_combo.grid(row=row, column=2, padx=4, pady=4)
            engine_combo.bind("<<ComboboxSelected>>", 
                            lambda e, n=name: self.on_engine_change(n))
            
            # –í–∫–ª—é—á–∞–µ–º –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ/–≤—Å—Ç–∞–≤–∫—É
            self.enable_copy_paste(engine_combo)
            
            # –ì–æ–ª–æ—Å (—Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –≤—ã–±–æ—Ä)
            voice_var = tk.StringVar()
            voice_combo = ttk.Combobox(scrollable_frame, textvariable=voice_var, width=18)
            voice_combo.grid(row=row, column=3, padx=4, pady=4)
            
            # –í–∫–ª—é—á–∞–µ–º –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ/–≤—Å—Ç–∞–≤–∫—É
            self.enable_copy_paste(voice_combo)
            
            # ID –ì–æ–ª–æ—Å–∞ (–¥–ª—è ElevenLabs) —Å –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏–π
            voice_id_var = tk.StringVar()
            voice_id_entry = ttk.Entry(scrollable_frame, textvariable=voice_id_var, width=20)
            voice_id_entry.grid(row=row, column=4, padx=4, pady=4)
            
            # –í–∫–ª—é—á–∞–µ–º –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ/–≤—Å—Ç–∞–≤–∫—É
            self.enable_copy_paste(voice_id_entry)
            
            # –ü—Ä–∏–≤—è–∑—ã–≤–∞–µ–º –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏–π voice_id
            voice_id_var.trace('w', lambda *args, n=name: self.on_voice_id_change(n))
            
            # API –ö–ª—é—á (—Ç–æ–ª—å–∫–æ –¥–ª—è ElevenLabs)
            api_key_var = tk.StringVar()
            api_entry = ttk.Entry(scrollable_frame, textvariable=api_key_var, width=20)
            api_entry.grid(row=row, column=5, padx=4, pady=4)
            
            # –í–∫–ª—é—á–∞–µ–º –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ/–≤—Å—Ç–∞–≤–∫—É –¥–ª—è API –∫–ª—é—á–∞
            self.enable_copy_paste(api_entry)
            
            # –ö–Ω–æ–ø–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ª–∏–º–∏—Ç–æ–≤ –∏ —Ç–µ—Å—Ç–∞ –≤ –æ–¥–Ω–æ–π –∫–æ–ª–æ–Ω–∫–µ
            button_frame = ttk.Frame(scrollable_frame)
            button_frame.grid(row=row, column=6, padx=2, pady=4)
            
            refresh_btn = ttk.Button(button_frame, text="‚ü≥", width=3,
                                   command=lambda n=name: self.check_api_limits(n))
            refresh_btn.grid(row=0, column=0)
            
            test_btn = ttk.Button(button_frame, text="üîä", width=3,
                                command=lambda n=name: self.test_character_voice(n))
            test_btn.grid(row=0, column=1)
            
            # –°—Ç–∞—Ç—É—Å
            status_var = tk.StringVar(value="–ù–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω")
            status_label = ttk.Label(scrollable_frame, textvariable=status_var, 
                                   font=("Arial", 8), foreground="gray")
            status_label.grid(row=row, column=7, padx=4, pady=4, sticky=tk.W)
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤–∏–¥–∂–µ—Ç—ã
            self.character_widgets[name] = {
                'gender': gender_var,
                'engine': engine_var,
                'voice': voice_var,
                'voice_combo': voice_combo,
                'voice_id': voice_id_var,
                'voice_id_entry': voice_id_entry,
                'api_key': api_key_var,
                'api_entry': api_entry,
                'refresh_btn': refresh_btn,
                'test_btn': test_btn,
                'status': status_var
            }
            
            # –ò–∑–Ω–∞—á–∞–ª—å–Ω–æ —Å–∫—Ä—ã–≤–∞–µ–º API –ø–æ–ª—è
            self.toggle_api_fields(name, False)
        
        # –ö–Ω–æ–ø–∫–∏
        button_frame = ttk.Frame(main_frame)
        button_frame.grid(row=3, column=0, columnspan=7, pady=15)
        
        ttk.Button(button_frame, text="–ê–≤—Ç–æ–Ω–∞—Å—Ç—Ä–æ–π–∫–∞", 
                  command=self.auto_setup, width=18).pack(side=tk.LEFT, padx=10)
        ttk.Button(button_frame, text="–°–æ—Ö—Ä–∞–Ω–∏—Ç—å", 
                  command=self.save_settings, width=15).pack(side=tk.LEFT, padx=10)
        ttk.Button(button_frame, text="–û—Ç–º–µ–Ω–∞", 
                  command=self.window.destroy, width=12).pack(side=tk.LEFT, padx=10)
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –≤–µ—Å–æ–≤ –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ä–∞–∑–º–µ—Ä–∞
        main_frame.columnconfigure(3, weight=1)  # –ö–æ–ª–æ–Ω–∫–∞ –≥–æ–ª–æ—Å–æ–≤
        main_frame.columnconfigure(4, weight=1)  # –ö–æ–ª–æ–Ω–∫–∞ ID –≥–æ–ª–æ—Å–æ–≤
        main_frame.columnconfigure(5, weight=1)  # –ö–æ–ª–æ–Ω–∫–∞ API –∫–ª—é—á–µ–π
        main_frame.rowconfigure(2, weight=1)     # –°–∫—Ä–æ–ª–ª–∏—Ä—É–µ–º–∞—è –æ–±–ª–∞—Å—Ç—å
        
        self.window.columnconfigure(0, weight=1)
        self.window.rowconfigure(0, weight=1)
        
    def enable_copy_paste(self, widget):
        """–í–∫–ª—é—á–∞–µ–º –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ –∏ –≤—Å—Ç–∞–≤–∫—É –¥–ª—è –ª—é–±–æ–≥–æ –≤–∏–¥–∂–µ—Ç–∞"""
        def on_copy(event=None):
            try:
                widget.tk.call('tk::TextCopy', widget)
            except:
                try:
                    if hasattr(widget, 'selection_get'):
                        text = widget.selection_get()
                        widget.clipboard_clear()
                        widget.clipboard_append(text)
                except:
                    pass
                    
        def on_paste(event=None):
            try:
                widget.tk.call('tk::TextPaste', widget)
            except:
                try:
                    text = widget.clipboard_get()
                    if hasattr(widget, 'insert'):
                        pos = widget.index(tk.INSERT) if hasattr(widget, 'index') else tk.END
                        widget.insert(pos, text)
                except:
                    pass
                    
        def on_cut(event=None):
            try:
                widget.tk.call('tk::TextCut', widget)
            except:
                try:
                    if hasattr(widget, 'selection_get'):
                        text = widget.selection_get()
                        widget.clipboard_clear()
                        widget.clipboard_append(text)
                        widget.delete(tk.SEL_FIRST, tk.SEL_LAST)
                except:
                    pass
                    
        def on_select_all(event=None):
            try:
                if hasattr(widget, 'select_range'):
                    widget.select_range(0, tk.END)
                elif hasattr(widget, 'tag_add'):
                    widget.tag_add(tk.SEL, "1.0", tk.END)
                elif hasattr(widget, 'selection_range'):
                    widget.selection_range(0, tk.END)
            except:
                pass
            return 'break'
        
        # –ü—Ä–∏–≤—è–∑—ã–≤–∞–µ–º –≥–æ—Ä—è—á–∏–µ –∫–ª–∞–≤–∏—à–∏
        widget.bind('<Control-c>', on_copy)
        widget.bind('<Control-v>', on_paste) 
        widget.bind('<Control-x>', on_cut)
        widget.bind('<Control-a>', on_select_all)
        
        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –±–∏–Ω–¥—ã –¥–ª—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω–æ–≥–æ –º–µ–Ω—é
        try:
            widget.bind('<Button-3>', lambda e: self.show_context_menu(e, widget))
        except:
            pass
    
    def show_context_menu(self, event, widget):
        """–ü–æ–∫–∞–∑–∞—Ç—å –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω–æ–µ –º–µ–Ω—é"""
        try:
            menu = tk.Menu(self.window, tearoff=0)
            menu.add_command(label="–ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å", command=lambda: widget.event_generate('<<Copy>>'))
            menu.add_command(label="–í—Å—Ç–∞–≤–∏—Ç—å", command=lambda: widget.event_generate('<<Paste>>'))
            menu.add_command(label="–í—ã—Ä–µ–∑–∞—Ç—å", command=lambda: widget.event_generate('<<Cut>>'))
            menu.add_separator()
            menu.add_command(label="–í—ã–¥–µ–ª–∏—Ç—å –≤—Å–µ", command=lambda: widget.select_range(0, tk.END) if hasattr(widget, 'select_range') else None)
            menu.tk_popup(event.x_root, event.y_root)
        except:
            pass
        finally:
            try:
                menu.grab_release()
            except:
                pass
        
    def toggle_api_fields(self, character_name, show):
        """–ü–æ–∫–∞–∑–∞—Ç—å/—Å–∫—Ä—ã—Ç—å –ø–æ–ª—è API –∫–ª—é—á–µ–π –∏ ID –≥–æ–ª–æ—Å–æ–≤ –¥–ª—è ElevenLabs"""
        widgets = self.character_widgets[character_name]
        
        if show:
            widgets['voice_id_entry'].grid()
            widgets['api_entry'].grid()
            widgets['refresh_btn'].grid()
        else:
            widgets['voice_id_entry'].grid_remove()
            widgets['api_entry'].grid_remove()
            widgets['refresh_btn'].grid_remove()
    
    def toggle_voice_selection(self, character_name, show_standard_voice):
        """–ü–æ–∫–∞–∑–∞—Ç—å/—Å–∫—Ä—ã—Ç—å —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –≤—ã–±–æ—Ä –≥–æ–ª–æ—Å–∞ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç voice_id"""
        widgets = self.character_widgets[character_name]
        
        if show_standard_voice:
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –≤—ã–±–æ—Ä –≥–æ–ª–æ—Å–∞
            widgets['voice_combo'].grid()
        else:
            # –°–∫—Ä—ã–≤–∞–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –≤—ã–±–æ—Ä –≥–æ–ª–æ—Å–∞ (–∫–æ–≥–¥–∞ –µ—Å—Ç—å voice_id)
            widgets['voice_combo'].grid_remove()
    
    def on_voice_id_change(self, character_name):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è voice_id - —É–º–Ω–æ–µ —Å–∫—Ä—ã—Ç–∏–µ –≥–æ–ª–æ—Å–æ–≤"""
        widgets = self.character_widgets[character_name]
        voice_id = widgets['voice_id'].get().strip()
        
        if voice_id:
            # –ï—Å—Ç—å voice_id - —Å–∫—Ä—ã–≤–∞–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –≤—ã–±–æ—Ä –≥–æ–ª–æ—Å–∞
            self.toggle_voice_selection(character_name, False)
            # –û—á–∏—â–∞–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –≥–æ–ª–æ—Å —á—Ç–æ–±—ã –Ω–µ –±—ã–ª–æ –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤
            widgets['voice'].set('')
        else:
            # –ù–µ—Ç voice_id - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –≤—ã–±–æ—Ä –≥–æ–ª–æ—Å–∞
            self.toggle_voice_selection(character_name, True)
        
    def load_voices_data(self):
        """–ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –æ –≥–æ–ª–æ—Å–∞—Ö –¥–ª—è TTS –¥–≤–∏–∂–∫–æ–≤"""
        return {
            "google_tts": ["pl-PL-Standard-A", "pl-PL-Standard-B", "pl-PL-Standard-C", "pl-PL-Standard-D"],
            "edge_tts": ["pl-PL-MarekNeural", "pl-PL-ZofiaNeural"],
            "gtts": ["pl"],
            "coqui_tts": ["tts_models/pl/mai_female/glow-tts"],
            "elevenlabs": ["Rachel", "Domi", "Bella", "Antoni", "Elli", "Josh", "Arnold", "Adam", "Sam"]
        }
    
    def on_engine_change(self, character_name):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è TTS –¥–≤–∏–∂–∫–∞"""
        widgets = self.character_widgets[character_name]
        engine = widgets['engine'].get()
        
        if engine in self.voices_data:
            voices = self.voices_data[engine]
            widgets['voice_combo']['values'] = voices
            if voices:
                widgets['voice'].set(voices[0])
                widgets['status'].set("‚ö† –ò–∑–º–µ–Ω–µ–Ω")
        else:
            widgets['voice_combo']['values'] = []
            widgets['voice'].set('')
            widgets['status'].set("–ù–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω")
        
        # –ü–æ–∫–∞–∑–∞—Ç—å/—Å–∫—Ä—ã—Ç—å API –ø–æ–ª—è —Ç–æ–ª—å–∫–æ –¥–ª—è ElevenLabs
        show_api = (engine == "elevenlabs")
        self.toggle_api_fields(character_name, show_api)
        
        # –ï—Å–ª–∏ –Ω–µ ElevenLabs, —Ç–æ –≤—Å–µ–≥–¥–∞ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –≤—ã–±–æ—Ä –≥–æ–ª–æ—Å–∞
        if not show_api:
            self.toggle_voice_selection(character_name, True)
            widgets['voice_id'].set('')  # –û—á–∏—â–∞–µ–º voice_id –¥–ª—è –¥—Ä—É–≥–∏—Ö –¥–≤–∏–∂–∫–æ–≤
    
    def check_api_limits(self, character_name):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–∏–º–∏—Ç–æ–≤ API –∏ —Ä–∞—Å—á–µ—Ç —Ç–æ–∫–µ–Ω–æ–≤ –¥–ª—è –ø–µ—Ä—Å–æ–Ω–∞–∂–∞"""
        widgets = self.character_widgets[character_name]
        api_key = widgets['api_key'].get().strip()
        
        if not api_key:
            widgets['status'].set("‚ö† –ù–µ—Ç API –∫–ª—é—á–∞")
            return
        
        widgets['status'].set("‚è≥ –†–∞—Å—á–µ—Ç —Ç–æ–∫–µ–Ω–æ–≤...")
        self.window.update()
        
        # 1. –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Ç–æ–∫–µ–Ω—ã –ø–µ—Ä—Å–æ–Ω–∞–∂–∞
        character_tokens = self.calculate_character_tokens(character_name)
        
        # 2. –ü—Ä–æ–≤–µ—Ä—è–µ–º API –ª–∏–º–∏—Ç—ã
        widgets['status'].set("‚è≥ –ü—Ä–æ–≤–µ—Ä–∫–∞ API...")
        self.window.update()
        
        try:
            from tts_engines.elevenlabs.elevenlabs_api import ElevenLabsAPI
            
            api = ElevenLabsAPI(api_key)
            credits_info = api.get_credits_info()
            
            if credits_info and 'error' not in credits_info:
                available = credits_info['credits_available']
                total = credits_info['credits_total']
                
                # 3. –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–∫–µ–Ω—ã –≤ –ø—Ä–æ—Ñ–∏–ª—å
                self.save_character_tokens(character_name, character_tokens)
                
                # 4. –û—Ç–æ–±—Ä–∞–∂–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
                if available >= character_tokens:
                    widgets['status'].set(f"‚úì {available}/{total} ({character_tokens} —Ç–æ–∫.)")
                else:
                    widgets['status'].set(f"‚ö† {available}/{total} –Ω—É–∂–Ω–æ {character_tokens}")
            else:
                error_msg = credits_info.get('error', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞') if credits_info else '–ù–µ—Ç –æ—Ç–≤–µ—Ç–∞'
                if '–ù–µ–≤–µ—Ä–Ω—ã–π API –∫–ª—é—á' in error_msg:
                    widgets['status'].set("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –∫–ª—é—á")
                else:
                    widgets['status'].set(f"‚ùå {error_msg[:15]}...")
                    
        except ImportError:
            widgets['status'].set("‚ùå API –º–æ–¥—É–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
        except Exception as e:
            widgets['status'].set(f"‚ùå {str(e)[:15]}...")
    
    def calculate_character_tokens(self, character_name):
        """–ü–æ–¥—Å—á–µ—Ç —Ç–æ–∫–µ–Ω–æ–≤ –¥–ª—è –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ –∏–∑ –ø—Ä–∞–≤–∏–ª—å–Ω–æ —Ä–∞—Å–ø–∞—Ä—Å–µ–Ω–Ω—ã—Ö —Å—É–±—Ç–∏—Ç—Ä–æ–≤"""
        if not self.subtitles:
            return 1
        
        character_tokens = 0
        character_lines = 0
        found_texts = []
        
        # –¢–µ–ø–µ—Ä—å —Å—É–±—Ç–∏—Ç—Ä—ã –ø—Ä–∞–≤–∏–ª—å–Ω–æ —Ä–∞—Å–ø–∞—Ä—Å–µ–Ω—ã, –ø–æ—ç—Ç–æ–º—É –ø—Ä–æ—Å—Ç–æ –∏—â–µ–º –ø–æ character
        for subtitle in self.subtitles:
            if subtitle.get('character') == character_name:
                text = subtitle.get('text', '').strip()
                if text:
                    found_texts.append(text)
                    character_lines += 1
                    
                    # –°—á–∏—Ç–∞–µ–º —Å–∏–º–≤–æ–ª—ã –≤ —Ä–µ–ø–ª–∏–∫–µ
                    tokens = len(text)
                    character_tokens += tokens
        
        print(f"\n=== –¢–û–ö–ï–ù–´ –î–õ–Ø {character_name.upper()} ===")
        print(f"–ù–∞–π–¥–µ–Ω–æ —Ä–µ–ø–ª–∏–∫: {character_lines}")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 3 —Ä–µ–ø–ª–∏–∫–∏
        for i, text in enumerate(found_texts[:3]):
            print(f"{i+1}: '{text[:40]}{'...' if len(text) > 40 else ''}'")
        
        if len(found_texts) > 3:
            print("   ...")
            
        print(f"–ò—Ç–æ–≥–æ: {character_tokens} —Å–∏–º–≤–æ–ª–æ–≤")
        
        return max(character_tokens, 1)
    
    def test_character_voice(self, character_name):
        """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≥–æ–ª–æ—Å–∞ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞"""
        widgets = self.character_widgets[character_name]
        
        # –ü–æ–ª—É—á–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞
        engine_name = widgets['engine'].get().strip()
        voice = widgets['voice'].get().strip()
        voice_id = widgets['voice_id'].get().strip()
        api_key = widgets['api_key'].get().strip()
        
        if not engine_name:
            widgets['status'].set("‚ö† –ù–µ—Ç TTS –¥–≤–∏–∂–∫–∞")
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º ElevenLabs
        if engine_name == 'elevenlabs':
            if not api_key:
                widgets['status'].set("‚ö† –ù–µ—Ç API –∫–ª—é—á–∞")
                return
                
            if not voice_id:
                widgets['status'].set("‚ö† –ù–µ—Ç Voice ID")
                return
                
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å
            widgets['status'].set("‚è≥ –¢–µ—Å—Ç–∏—Ä—É–µ–º...")
            self.window.update()
            
            # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞
            character_data = {
                'api_key': api_key,
                'voice_id': voice_id
            }
            
            test_text = f"Hello, I am {character_name}. This is a voice test."
            
            try:
                result = self.tts_manager.test_voice('ElevenLabs', character_data, test_text)
                
                if result['success']:
                    widgets['status'].set("‚úÖ –¢–µ—Å—Ç –æ–∫")
                else:
                    widgets['status'].set(f"‚ùå {result.get('error', '–û—à–∏–±–∫–∞')[:10]}")
                    
            except Exception as e:
                widgets['status'].set(f"‚ùå –û—à–∏–±–∫–∞: {str(e)[:10]}")
        else:
            widgets['status'].set(f"‚ö† {engine_name} –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è")

    
    def save_character_tokens(self, character_name, tokens):
        """–°–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ç–æ–∫–µ–Ω—ã –≤ –ø—Ä–æ—Ñ–∏–ª—å"""
        char_settings = self.profile.get_character(character_name)
        if char_settings:
            self.profile.update_character(character_name, estimated_tokens=tokens)
        else:
            gender = self.character_widgets[character_name]['gender'].get()
            self.profile.add_character(character_name, '', '', gender, '', '', tokens)
    
    def load_existing_settings(self):
        """–ó–∞–≥—Ä—É–∑–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∏–∑ –ø—Ä–æ—Ñ–∏–ª—è"""
        for name, widgets in self.character_widgets.items():
            char_settings = self.profile.get_character(name)
            if char_settings:
                widgets['gender'].set(char_settings.get('gender', 'unknown'))
                widgets['engine'].set(char_settings.get('tts_engine', ''))
                
                if char_settings.get('tts_engine'):
                    self.on_engine_change(name)
                    
                    voice_id = char_settings.get('voice_id', '')
                    voice = char_settings.get('voice', '')
                    
                    if voice_id:
                        widgets['voice_id'].set(voice_id)
                        self.toggle_voice_selection(name, False)
                    else:
                        widgets['voice'].set(voice)
                        self.toggle_voice_selection(name, True)
                    
                    if char_settings.get('tts_engine') == 'elevenlabs':
                        api_key = char_settings.get('api_key', '')
                        widgets['api_key'].set(api_key)
                    
                    estimated_tokens = char_settings.get('estimated_tokens', 0)
                    if estimated_tokens > 0:
                        widgets['status'].set(f"‚úì –ù–∞—Å—Ç—Ä–æ–µ–Ω ({estimated_tokens} —Ç–æ–∫.)")
                    else:
                        widgets['status'].set("‚úì –ù–∞—Å—Ç—Ä–æ–µ–Ω")
            else:
                widgets['status'].set("–ù–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω")
    
    def auto_setup(self):
        """–ê–≤—Ç–æ–Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –≥–æ–ª–æ—Å–æ–≤"""
        male_voices = {"edge_tts": ["pl-PL-MarekNeural"], "google_tts": ["pl-PL-Standard-B"]}
        female_voices = {"edge_tts": ["pl-PL-ZofiaNeural"], "google_tts": ["pl-PL-Standard-A"]}
        
        used_voices = {"male": {}, "female": {}}
        
        for name, widgets in self.character_widgets.items():
            char_settings = self.profile.get_character(name)
            if char_settings and char_settings.get('tts_engine'):
                continue
                
            gender = widgets['gender'].get()
            engine = "edge_tts"
            
            widgets['engine'].set(engine)
            self.on_engine_change(name)
            
            if gender == "male" and engine in male_voices:
                voice = male_voices[engine][0]
                widgets['voice'].set(voice)
                widgets['status'].set("üîß –ê–≤—Ç–æ–Ω–∞—Å—Ç—Ä–æ–π–∫–∞")
            elif gender == "female" and engine in female_voices:
                voice = female_voices[engine][0]
                widgets['voice'].set(voice)
                widgets['status'].set("üîß –ê–≤—Ç–æ–Ω–∞—Å—Ç—Ä–æ–π–∫–∞")
    
    def save_settings(self):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫"""
        try:
            saved_count = 0
            
            for name, widgets in self.character_widgets.items():
                gender = widgets['gender'].get()
                engine = widgets['engine'].get()
                
                voice_id = widgets['voice_id'].get().strip() if engine == 'elevenlabs' else ''
                voice = widgets['voice'].get() if not voice_id else ''
                api_key = widgets['api_key'].get() if engine == 'elevenlabs' else ''
                
                if engine and (voice or voice_id):
                    char_settings = self.profile.get_character(name)
                    estimated_tokens = char_settings.get('estimated_tokens', 0) if char_settings else 0
                    
                    self.profile.add_character(name, engine, voice, gender, api_key, voice_id, estimated_tokens)
                    
                    if estimated_tokens > 0:
                        widgets['status'].set(f"‚úì –°–æ—Ö—Ä–∞–Ω–µ–Ω ({estimated_tokens} —Ç–æ–∫.)")
                    else:
                        widgets['status'].set("‚úì –°–æ—Ö—Ä–∞–Ω–µ–Ω")
                    
                    saved_count += 1
                else:
                    widgets['status'].set("–û—à–∏–±–∫–∞")
            
            self.profile.save_profile()
            messagebox.showinfo("–£—Å–ø–µ—Ö", f"–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã\n–ü–µ—Ä—Å–æ–Ω–∞–∂–µ–π: {saved_count}")
            self.window.destroy()
            
        except Exception as e:
            messagebox.showerror("–û—à–∏–±–∫–∞", f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å: {e}")