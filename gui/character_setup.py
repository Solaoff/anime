import tkinter as tk
from tkinter import ttk, messagebox
import os
import sys
sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

from profiles.character_profile import CharacterProfile
from tts_engines.tts_manager import TTSManager
import pygame

class CharacterSetupWindow:
    def __init__(self, parent, characters, profile=None):
        self.parent = parent
        self.characters = characters
        self.profile = profile
        self.tts_manager = TTSManager()
        
        # –î–æ—Å—Ç—É–ø–Ω—ã–µ TTS –¥–≤–∏–∂–∫–∏
        self.tts_engines = ["elevenlabs", "edge_tts", "google_tts", "gtts"]
        
        # –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –≤—Å–µ—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö
        self.character_vars = {}
        
        # –°–æ–∑–¥–∞–µ–º –æ–∫–Ω–æ
        self.window = tk.Toplevel(parent)
        self.window.title("–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π")
        self.window.geometry("1200x600")
        self.window.transient(parent)
        self.window.grab_set()
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è pygame –¥–ª—è –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è
        try:
            pygame.mixer.init()
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ pygame: {e}")
        
        self.create_widgets()
        self.load_character_data()
    
    def create_widgets(self):
        # –û—Å–Ω–æ–≤–Ω–æ–π —Ñ—Ä–µ–π–º —Å –ø—Ä–æ–∫—Ä—É—Ç–∫–æ–π
        main_frame = ttk.Frame(self.window)
        main_frame.grid(row=0, column=0, sticky="nsew", padx=10, pady=10)
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ä–∞—Å—Ç—è–∂–µ–Ω–∏—è
        self.window.grid_rowconfigure(0, weight=1)
        self.window.grid_columnconfigure(0, weight=1)
        main_frame.grid_rowconfigure(1, weight=1)
        main_frame.grid_columnconfigure(0, weight=1)
        
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        title_label = ttk.Label(main_frame, text="–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –≥–æ–ª–æ—Å–æ–≤ –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π", 
                               font=("Arial", 14, "bold"))
        title_label.grid(row=0, column=0, pady=(0, 10), sticky="w")
        
        # –°–æ–∑–¥–∞–µ–º Canvas –∏ Scrollbar –¥–ª—è –ø—Ä–æ–∫—Ä—É—Ç–∫–∏
        canvas = tk.Canvas(main_frame)
        scrollbar = ttk.Scrollbar(main_frame, orient="vertical", command=canvas.yview)
        scrollable_frame = ttk.Frame(canvas)
        
        scrollable_frame.bind(
            "<Configure>",
            lambda e: canvas.configure(scrollregion=canvas.bbox("all"))
        )
        
        canvas.create_window((0, 0), window=scrollable_frame, anchor="nw")
        canvas.configure(yscrollcommand=scrollbar.set)
        
        # –†–∞–∑–º–µ—â–∞–µ–º canvas –∏ scrollbar
        canvas.grid(row=1, column=0, sticky="nsew")
        scrollbar.grid(row=1, column=1, sticky="ns")
        
        # –ó–∞–≥–æ–ª–æ–≤–∫–∏ –∫–æ–ª–æ–Ω–æ–∫
        headers = ["–ü–µ—Ä—Å–æ–Ω–∞–∂", "–ü–æ–ª", "TTS", "–ì–æ–ª–æ—Å", "ID –ì–æ–ª–æ—Å–∞", "API –ö–ª—é—á", "–î–µ–π—Å—Ç–≤–∏—è", "–°—Ç–∞—Ç—É—Å"]
        for col, header in enumerate(headers):
            header_label = ttk.Label(scrollable_frame, text=header, font=("Arial", 10, "bold"))
            header_label.grid(row=0, column=col, padx=4, pady=5, sticky="w")
        
        # –°–æ–∑–¥–∞–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞
        for row, (name, char_data) in enumerate(self.characters.items(), start=1):
            self.create_character_row(scrollable_frame, row, name, char_data)
        
        # –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        button_frame = ttk.Frame(main_frame)
        button_frame.grid(row=2, column=0, columnspan=2, pady=10, sticky="ew")
        
        ttk.Button(button_frame, text="–°–æ—Ö—Ä–∞–Ω–∏—Ç—å", command=self.save_settings).grid(row=0, column=0, padx=5)
        ttk.Button(button_frame, text="–û—Ç–º–µ–Ω–∞", command=self.window.destroy).grid(row=0, column=1, padx=5)
        ttk.Button(button_frame, text="–ü—Ä–∏–º–µ–Ω–∏—Ç—å", command=self.apply_settings).grid(row=0, column=2, padx=5)
    
    def create_character_row(self, parent_frame, row, name, char_data):
        """–°–æ–∑–¥–∞–Ω–∏–µ —Å—Ç—Ä–æ–∫–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –¥–ª—è –ø–µ—Ä—Å–æ–Ω–∞–∂–∞"""
        
        # –ò–º—è –ø–µ—Ä—Å–æ–Ω–∞–∂–∞
        name_label = ttk.Label(parent_frame, text=name, font=("Arial", 9, "bold"))
        name_label.grid(row=row, column=0, padx=4, pady=4, sticky=tk.W)
        
        # –ü–æ–ª
        gender_var = tk.StringVar(value=char_data.get('gender', 'unknown'))
        gender_combo = ttk.Combobox(parent_frame, textvariable=gender_var, 
                                  values=["male", "female", "unknown"], width=8)
        gender_combo.grid(row=row, column=1, padx=4, pady=4)
        
        # –í–∫–ª—é—á–∞–µ–º –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ/–≤—Å—Ç–∞–≤–∫—É
        self.enable_copy_paste(gender_combo)
        
        # TTS –î–≤–∏–∂–æ–∫
        engine_var = tk.StringVar()
        engine_combo = ttk.Combobox(parent_frame, textvariable=engine_var, 
                                  values=self.tts_engines, width=12)
        engine_combo.grid(row=row, column=2, padx=4, pady=4)
        engine_combo.bind("<<ComboboxSelected>>", 
                        lambda e, n=name: self.on_engine_change(n))
        
        # –í–∫–ª—é—á–∞–µ–º –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ/–≤—Å—Ç–∞–≤–∫—É
        self.enable_copy_paste(engine_combo)
        
        # –ì–æ–ª–æ—Å (—Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –≤—ã–±–æ—Ä)
        voice_var = tk.StringVar()
        voice_combo = ttk.Combobox(parent_frame, textvariable=voice_var, width=18)
        voice_combo.grid(row=row, column=3, padx=4, pady=4)
        
        # –í–∫–ª—é—á–∞–µ–º –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ/–≤—Å—Ç–∞–≤–∫—É
        self.enable_copy_paste(voice_combo)
        
        # ID –ì–æ–ª–æ—Å–∞ (–¥–ª—è ElevenLabs) —Å –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏–π
        voice_id_var = tk.StringVar()
        voice_id_entry = ttk.Entry(parent_frame, textvariable=voice_id_var, width=20)
        voice_id_entry.grid(row=row, column=4, padx=4, pady=4)
        
        # –í–∫–ª—é—á–∞–µ–º –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ/–≤—Å—Ç–∞–≤–∫—É
        self.enable_copy_paste(voice_id_entry)
        
        # –ü—Ä–∏–≤—è–∑—ã–≤–∞–µ–º –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏–π voice_id
        voice_id_var.trace('w', lambda *args, n=name: self.on_voice_id_change(n))
        
        # API –ö–ª—é—á (—Ç–æ–ª—å–∫–æ –¥–ª—è ElevenLabs)
        api_key_var = tk.StringVar()
        api_entry = ttk.Entry(parent_frame, textvariable=api_key_var, width=20)
        api_entry.grid(row=row, column=5, padx=4, pady=4)
        
        # –í–∫–ª—é—á–∞–µ–º –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ/–≤—Å—Ç–∞–≤–∫—É –¥–ª—è API –∫–ª—é—á–∞
        self.enable_copy_paste(api_entry)
        
        # –ö–Ω–æ–ø–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π - –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ–ª—å–∫–æ grid()
        button_frame = ttk.Frame(parent_frame)
        button_frame.grid(row=row, column=6, padx=2, pady=4)
        
        # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º grid –¥–ª—è button_frame
        button_frame.grid_columnconfigure(0, weight=1)
        button_frame.grid_columnconfigure(1, weight=1)
        
        refresh_btn = ttk.Button(button_frame, text="‚ü≥", width=3,
                               command=lambda n=name: self.check_api_limits(n))
        refresh_btn.grid(row=0, column=0, padx=1)
        
        test_btn = ttk.Button(button_frame, text="üîä", width=3,
                            command=lambda n=name: self.test_character_voice(n))
        test_btn.grid(row=0, column=1, padx=1)
        
        # –°—Ç–∞—Ç—É—Å
        status_var = tk.StringVar(value="–ù–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω")
        status_label = ttk.Label(parent_frame, textvariable=status_var, 
                               font=("Arial", 8), foreground="gray")
        status_label.grid(row=row, column=7, padx=4, pady=4, sticky=tk.W)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—Å–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è –ø–µ—Ä—Å–æ–Ω–∞–∂–∞
        self.character_vars[name] = {
            'gender': gender_var,
            'engine': engine_var,
            'voice': voice_var,
            'voice_id': voice_id_var,
            'api_key': api_key_var,
            'status': status_var,
            'voice_combo': voice_combo,
            'voice_id_entry': voice_id_entry,
            'api_entry': api_entry
        }
    
    def toggle_api_fields(self):
        """–ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –≤–∏–¥–∏–º–æ—Å—Ç–∏ –ø–æ–ª–µ–π API –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –¥–≤–∏–∂–∫–∞"""
        for name, vars_dict in self.character_vars.items():
            engine = vars_dict['engine'].get()
            voice_id_entry = vars_dict['voice_id_entry']
            api_entry = vars_dict['api_entry']
            
            if engine == "elevenlabs":
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–ª—è –¥–ª—è ElevenLabs - –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ–ª—å–∫–æ grid()
                voice_id_entry.grid()
                api_entry.grid()
            else:
                # –°–∫—Ä—ã–≤–∞–µ–º –ø–æ–ª—è –¥–ª—è –¥—Ä—É–≥–∏—Ö –¥–≤–∏–∂–∫–æ–≤ - –∏—Å–ø–æ–ª—å–∑—É–µ–º grid_remove()
                voice_id_entry.grid_remove()
                api_entry.grid_remove()
    
    def enable_copy_paste(self, widget):
        """–í–∫–ª—é—á–µ–Ω–∏–µ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è/–≤—Å—Ç–∞–≤–∫–∏ –¥–ª—è –≤–∏–¥–∂–µ—Ç–∞"""
        def copy_text(event):
            try:
                widget.clipboard_clear()
                if hasattr(widget, 'selection_get'):
                    widget.clipboard_append(widget.selection_get())
                else:
                    widget.clipboard_append(widget.get())
            except:
                pass
        
        def paste_text(event):
            try:
                text = widget.clipboard_get()
                if hasattr(widget, 'delete') and hasattr(widget, 'insert'):
                    widget.delete(0, tk.END)
                    widget.insert(0, text)
                elif hasattr(widget, 'set'):
                    widget.set(text)
            except:
                pass
        
        def cut_text(event):
            try:
                copy_text(event)
                if hasattr(widget, 'delete'):
                    widget.delete(0, tk.END)
            except:
                pass
        
        def select_all(event):
            try:
                if hasattr(widget, 'select_range'):
                    widget.select_range(0, tk.END)
                elif hasattr(widget, 'selection_range'):
                    widget.selection_range(0, tk.END)
            except:
                pass
        
        widget.bind('<Control-c>', copy_text)
        widget.bind('<Control-v>', paste_text)
        widget.bind('<Control-x>', cut_text)
        widget.bind('<Control-a>', select_all)
    
    def on_engine_change(self, character_name):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è TTS –¥–≤–∏–∂–∫–∞"""
        if character_name not in self.character_vars:
            return
            
        vars_dict = self.character_vars[character_name]
        engine = vars_dict['engine'].get()
        voice_combo = vars_dict['voice_combo']
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –≥–æ–ª–æ—Å–æ–≤
        voices = self.tts_manager.get_voices_for_engine(engine)
        voice_combo['values'] = voices
        
        # –û—á–∏—â–∞–µ–º —Ç–µ–∫—É—â–∏–π –≤—ã–±–æ—Ä
        vars_dict['voice'].set("")
        
        # –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º –≤–∏–¥–∏–º–æ—Å—Ç—å API –ø–æ–ª–µ–π
        self.toggle_api_fields()
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å
        self.update_character_status(character_name)
    
    def on_voice_id_change(self, character_name):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è Voice ID"""
        if character_name not in self.character_vars:
            return
            
        vars_dict = self.character_vars[character_name]
        voice_id = vars_dict['voice_id'].get().strip()
        
        if voice_id:
            # –ï—Å–ª–∏ –≤–≤–µ–¥–µ–Ω voice_id, –æ—á–∏—â–∞–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π voice
            vars_dict['voice'].set("")
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å
        self.update_character_status(character_name)
    
    def update_character_status(self, character_name):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞"""
        if character_name not in self.character_vars:
            return
            
        vars_dict = self.character_vars[character_name]
        engine = vars_dict['engine'].get()
        voice = vars_dict['voice'].get()
        voice_id = vars_dict['voice_id'].get().strip()
        api_key = vars_dict['api_key'].get().strip()
        
        if not engine:
            status = "–í—ã–±–µ—Ä–∏—Ç–µ TTS"
            color = "red"
        elif engine == "elevenlabs":
            if not api_key:
                status = "–ù—É–∂–µ–Ω API –∫–ª—é—á"
                color = "red"
            elif not voice_id and not voice:
                status = "–ù—É–∂–µ–Ω Voice ID –∏–ª–∏ –≥–æ–ª–æ—Å"
                color = "red"
            else:
                status = "–ù–∞—Å—Ç—Ä–æ–µ–Ω"
                color = "green"
        else:
            if not voice:
                status = "–í—ã–±–µ—Ä–∏—Ç–µ –≥–æ–ª–æ—Å"
                color = "red"
            else:
                status = "–ù–∞—Å—Ç—Ä–æ–µ–Ω"
                color = "green"
        
        vars_dict['status'].set(status)
        # –û–±–Ω–æ–≤–ª—è–µ–º —Ü–≤–µ—Ç —Å—Ç–∞—Ç—É—Å–∞ —á–µ—Ä–µ–∑ parent widget
        status_label = None
        for child in vars_dict['status']._root().winfo_children():
            if hasattr(child, 'cget') and child.cget('textvariable') == str(vars_dict['status']):
                child.configure(foreground=color)
                break
    
    def check_api_limits(self, character_name):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–∏–º–∏—Ç–æ–≤ API –¥–ª—è –ø–µ—Ä—Å–æ–Ω–∞–∂–∞"""
        if character_name not in self.character_vars:
            return
            
        vars_dict = self.character_vars[character_name]
        engine = vars_dict['engine'].get()
        api_key = vars_dict['api_key'].get().strip()
        
        if engine == "elevenlabs" and api_key:
            try:
                # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ø—Ä–æ–≤–µ—Ä–∫—É –ª–∏–º–∏—Ç–æ–≤ —á–µ—Ä–µ–∑ API
                messagebox.showinfo("–õ–∏–º–∏—Ç—ã API", f"–ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–∏–º–∏—Ç–æ–≤ –¥–ª—è {character_name}\nAPI: {api_key[:10]}...")
            except Exception as e:
                messagebox.showerror("–û—à–∏–±–∫–∞", f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ API: {e}")
        else:
            messagebox.showwarning("–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ", "–î–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ª–∏–º–∏—Ç–æ–≤ –Ω—É–∂–µ–Ω ElevenLabs API –∫–ª—é—á")
    
    def test_character_voice(self, character_name):
        """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≥–æ–ª–æ—Å–∞ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞"""
        if character_name not in self.character_vars:
            return
            
        vars_dict = self.character_vars[character_name]
        engine = vars_dict['engine'].get()
        voice = vars_dict['voice'].get()
        voice_id = vars_dict['voice_id'].get().strip()
        api_key = vars_dict['api_key'].get().strip()
        
        if not engine:
            messagebox.showwarning("–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ", "–°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ TTS –¥–≤–∏–∂–æ–∫")
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –¥–≤–∏–∂–∫–∞
        if engine == "elevenlabs":
            if not api_key:
                messagebox.showwarning("–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ", "–î–ª—è ElevenLabs –Ω—É–∂–µ–Ω API –∫–ª—é—á")
                return
            if not voice_id and not voice:
                messagebox.showwarning("–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ", "–î–ª—è ElevenLabs –Ω—É–∂–µ–Ω Voice ID –∏–ª–∏ –≥–æ–ª–æ—Å")
                return
        else:
            if not voice:
                messagebox.showwarning("–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ", "–í—ã–±–µ—Ä–∏—Ç–µ –≥–æ–ª–æ—Å –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è")
                return
        
        try:
            # –¢–µ—Å—Ç–æ–≤—ã–π —Ç–µ–∫—Å—Ç
            test_text = f"–ü—Ä–∏–≤–µ—Ç! –ú–µ–Ω—è –∑–æ–≤—É—Ç {character_name}. –≠—Ç–æ —Ç–µ—Å—Ç –º–æ–µ–≥–æ –≥–æ–ª–æ—Å–∞."
            
            # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞
            temp_settings = {
                'tts_engine': engine,
                'voice': voice,
                'api_key': api_key,
                'voice_id': voice_id
            }
            
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∞—É–¥–∏–æ —á–µ—Ä–µ–∑ TTS –º–µ–Ω–µ–¥–∂–µ—Ä
            audio_data = self.tts_manager.generate_speech(test_text, temp_settings)
            
            if audio_data:
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤–æ –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª –∏ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–æ–¥–∏–º
                temp_file = f"temp_test_{character_name}.mp3"
                with open(temp_file, 'wb') as f:
                    f.write(audio_data)
                
                # –í–æ—Å–ø—Ä–æ–∏–∑–≤–æ–¥–∏–º
                pygame.mixer.music.load(temp_file)
                pygame.mixer.music.play()
                
                messagebox.showinfo("–¢–µ—Å—Ç –≥–æ–ª–æ—Å–∞", f"–í–æ—Å–ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç—Å—è —Ç–µ—Å—Ç –≥–æ–ª–æ—Å–∞ –¥–ª—è {character_name}")
                
                # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª –ø–æ—Å–ª–µ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è
                def cleanup():
                    try:
                        if os.path.exists(temp_file):
                            os.remove(temp_file)
                    except:
                        pass
                
                self.window.after(5000, cleanup)  # –£–¥–∞–ª—è–µ–º —á–µ—Ä–µ–∑ 5 —Å–µ–∫—É–Ω–¥
            else:
                messagebox.showerror("–û—à–∏–±–∫–∞", "–ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —Ç–µ—Å—Ç–æ–≤–æ–µ –∞—É–¥–∏–æ")
                
        except Exception as e:
            messagebox.showerror("–û—à–∏–±–∫–∞", f"–û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≥–æ–ª–æ—Å–∞: {e}")
    
    def load_character_data(self):
        """–ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π –∏–∑ –ø—Ä–æ—Ñ–∏–ª—è"""
        if not self.profile:
            return
            
        for name in self.characters.keys():
            if name in self.character_vars:
                char_data = self.profile.get_character(name)
                if char_data:
                    vars_dict = self.character_vars[name]
                    
                    # –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
                    vars_dict['gender'].set(char_data.get('gender', 'unknown'))
                    vars_dict['engine'].set(char_data.get('tts_engine', ''))
                    vars_dict['voice'].set(char_data.get('voice', ''))
                    vars_dict['voice_id'].set(char_data.get('voice_id', ''))
                    vars_dict['api_key'].set(char_data.get('api_key', ''))
                    
                    # –û–±–Ω–æ–≤–ª—è–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ –≥–æ–ª–æ—Å–∞
                    engine = char_data.get('tts_engine', '')
                    if engine:
                        voices = self.tts_manager.get_voices_for_engine(engine)
                        vars_dict['voice_combo']['values'] = voices
                    
                    # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å
                    self.update_character_status(name)
        
        # –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º –≤–∏–¥–∏–º–æ—Å—Ç—å API –ø–æ–ª–µ–π
        self.toggle_api_fields()
    
    def apply_settings(self):
        """–ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –±–µ–∑ –∑–∞–∫—Ä—ã—Ç–∏—è –æ–∫–Ω–∞"""
        self.save_character_settings()
        messagebox.showinfo("–£—Å–ø–µ—Ö", "–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–∏–º–µ–Ω–µ–Ω—ã")
    
    def save_settings(self):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∏ –∑–∞–∫—Ä—ã—Ç–∏–µ –æ–∫–Ω–∞"""
        self.save_character_settings()
        self.window.destroy()
    
    def save_character_settings(self):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –≤—Å–µ—Ö –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π –≤ –ø—Ä–æ—Ñ–∏–ª—å"""
        if not self.profile:
            return
        
        for name, vars_dict in self.character_vars.items():
            # –ü–æ–ª—É—á–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –∏–∑ –ø–æ–ª–µ–π
            gender = vars_dict['gender'].get()
            engine = vars_dict['engine'].get()
            voice = vars_dict['voice'].get()
            voice_id = vars_dict['voice_id'].get().strip()
            api_key = vars_dict['api_key'].get().strip()
            
            # –ü–æ–¥—Å—á–µ—Ç —Ç–æ–∫–µ–Ω–æ–≤ –¥–ª—è –ø–µ—Ä—Å–æ–Ω–∞–∂–∞
            estimated_tokens = 0
            if name in self.characters and engine == 'elevenlabs':
                # –ü—Ä–æ—Å—Ç–∞—è –æ—Ü–µ–Ω–∫–∞: 1 —Ç–æ–∫–µ–Ω = ~4 —Å–∏–º–≤–æ–ª–∞
                char_text = ' '.join([line.get('text', '') for line in self.characters[name]])
                estimated_tokens = len(char_text) // 4
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –∏–ª–∏ –¥–æ–±–∞–≤–ª—è–µ–º –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ –≤ –ø—Ä–æ—Ñ–∏–ª—å
            if name in [char['name'] for char in self.profile.get_all_characters().values()]:
                # –û–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞
                self.profile.update_character(
                    name,
                    tts_engine=engine,
                    voice=voice,
                    gender=gender,
                    api_key=api_key,
                    voice_id=voice_id,
                    estimated_tokens=estimated_tokens
                )
            else:
                # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–≥–æ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞
                self.profile.add_character(
                    name=name,
                    tts_engine=engine,
                    voice=voice,
                    gender=gender,
                    api_key=api_key,
                    voice_id=voice_id,
                    estimated_tokens=estimated_tokens
                )
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–æ—Ñ–∏–ª—å
        try:
            self.profile.save_profile()
            print("–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ –ø—Ä–æ—Ñ–∏–ª—å")
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è: {e}")
            messagebox.showerror("–û—à–∏–±–∫–∞", f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è: {e}")